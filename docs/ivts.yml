openapi: '3.0.2'
info:
  title: Inventory made Simple
  version: '1.0'
servers:
  - url: http://localhost:4000/
paths:
  /ok:
    get:
      description: The call validates if the API server is running.
      responses:
        '200':
          description: the server is up and running.
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/ok'
              example:
                status: ok

  /places:
    get:
      description: The call returns all available places
      responses:
        '201':
          description: A list of places is returned. The list may be empty.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/place'
        '500':
          $ref: '#/components/responses/internal'
           
    post:
      description: create a new place to store items.
      requestBody:
        description: the label of the new place
        content:
          application/json: 
            schema:
              type: object
              properties:
                label:
                  description: unique name
                  type: string
              required:
              - label
      responses:
        '200':
          description: The place has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        '400':
          description: >
            The request was incorrect. The following codes can be sent
              
            - `E0-PARSE`: the request cannot be parsed

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '422':
          description: >
            The request cannot be processed.

            - `E3-E16`: The label field is empty or not present.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          $ref: '#/components/responses/internal'

  /labels:
    description: >
      Labels are identifiers that are linked to items. The link is done in the UI.
      The idea behind the labels is that different types of labels can used: bar
      codes, QR codes, and perhaps even covers of containers.

      Currently, only *automatic* labels are supported. These are labels that are
      generated by the system and proposed to the user. To facilitate this the front
      end manages a cache of labels.
    put:
      description: The call returns a list of locked labels
      requestBody:
        description: the label of the new place
        content:
          application/json: 
            schema:
              type: object
              properties:
                count:
                  description: the number of labels to return
                  type: number
                  format: integer
                  minimum: 1
                  maximum: 100
              required:
              - count
      responses:
        '200':
          description: >
            The number of labels has been locked for this request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                example:
                  - 17
                  - 18
                  - 19
        '400':
          description: >
            The request was incorrect
            
            - `E5-IE16`: A mandatory field is missing.
              
            - `E5-IE17`: The value of a field is not acceptable
              
            - `E0-PARSE`: the request cannot be parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          $ref: '#/components/responses/internal'

  /items:
    get:
      description: >
        This REST call will return some items. The items will be filtered based on
        the parameters passed on input.
      parameters:
        - in: query
          name: p
          schema:
            type: string
            enum:
            - itemdescriptions
            - stored
            default: stored
      responses:
        '200':
          description: >
            Depending on the parameter `p` two possible results:
              
            * a list of item descriptions if `p` is `itemdescriptions`

            * an array of items, possibly empty
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/itemarray'
                - $ref: '#/components/schemas/itemdescriptions'
        '400':
          description: >
            The request was incorrect
            
            - `E2-IE3`: A parameter has a not allowed value.
              
            - `E0-PARSE`: the request cannot be parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          $ref: '#/components/responses/internal'

    post:
      description: create a new item
      requestBody:
        description: the label of the new place
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/item_request'
              required:
              - description
              - labelid
      responses:
        '200':
          description: The place has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        '400':
          description: >
            The request was incorrect. The following codes can be sent
              
            - `E0-PARSE`: the request cannot be parsed
            
            - `E1-IE16`: a field was missing or empty.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '422':
          description: >
            The request cannot be processed.

            - `E3-E16`: The label field is empty or not present.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          $ref: '#/components/responses/internal'

#  /bulk/items:
#    description: >
#      Bulk requests behave like the individual requests without the bulk prefix.
#      They will execute in parallel


components:
  responses:
    internal:
      description: >
        An internal server error happened. An intervention by the system
        administrator may be required.

        - `E<n>-INTERNAL`: Unknown error
              
        - `E<n>-DATABASE`: The database is unreachable
              
        The \<n> is replaced by a number indicating the operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  schemas:
    ok:
      type: object
      properties: 
        status:
          description: the value is always 'ok'
          type: string
          enum:
          - ok
    
    place:
      type: object
      properties:
        id:
          description: internal unique identifier
          type: number
        label:
          description: unique name
          type: string
        createdAt:
          description: date of creation
          type: string
          format: date-time
        updatedAt:
          description: date of last update
          type: string
          format: date-time

    splace:
      type: object
      properties:
        id:
          description: internal unique identifier
          type: number
        label:
          description: unique name
          type: string
    
    itemdescriptions:
      type: array
      items:
        type: string

    item:
      type: object
      properties:
        id:
          description: internal unique identifier
          type: number
        description:
          description: what is the item
          type: string
        quantity:
          description: an indication of the quantity
          type: string
        uikey:
          description: a reference used by the UI
          type: string
        labelid:
          description: refers to the label
          type: integer
        place:
          $ref: '#/components/schemas/splace'
        createdAt:
          description: date of creation
          type: string
          format: date-time
        updatedAt:
          description: date of last update
          type: string
          format: date-time
        deletedAt:
          description: date of soft-delete
          type: string
          format: date-time

    item_request:
      type: object
      properties:
        description:
          description: what is the item
          type: string
        quantity:
          description: an indication of the quantity
          type: string
        uikey:
          description: a reference used by the UI
          type: string
        labelid:
          description: refers to the label
          type: integer
        placeid:
          description: refers to the place where the item is stored
          type: integer

    itemarray:
      type: array
      items:
        $ref: '#/components/schemas/item'

    error:
      type: object
      properties:
        code:
          type: string
          description: Indicates a code for the summary and one for the detail.
        summary:
          type: string
          description: A string representing the summary code
        detail:
          type: string
          description: >
            A string representing the detail code. The field may contain additional
            info